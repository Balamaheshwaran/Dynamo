//Copyright 2012 Ian Keough

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at

//http://www.apache.org/licenses/LICENSE-2.0

//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

using System;
using System.Linq;
using System.Windows.Controls;
using Dynamo.Connectors;
using Dynamo.Utilities;
using Microsoft.FSharp.Collections;
using System.Collections.Generic;

using Dynamo.FSchemeInterop;
using Value = Dynamo.FScheme.Value;

using Autodesk.ASM;
using Autodesk.DesignScript.Interfaces;

namespace Dynamo.Nodes
{
    [NodeName("ASM Line")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("line")]
    public class dynASMLine : dynNodeWithOneOutput
    {
        Line l;

        public dynASMLine()
        {
            InPortData.Add(new PortData("start", "The start point.", typeof(object)));
            InPortData.Add(new PortData("end", "The end point.", typeof(object)));
            OutPortData.Add(new PortData("l", "The curve generated by this operation.", typeof(object)));

            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {

            if (l != null)
            {
                l.unpersist();
                l.Dispose();
                l = null;
            }

            Point start = (Point)((Value.Container)args[0]).Item;
            Point end = (Point)((Value.Container)args[1]).Item;

            l = new Line(start, end);
            l.persist();

            return Value.NewContainer(l);
        }
    }

    [NodeName("ASM BSpline")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("bspline")]
    public class dynASMBSpline : dynNodeWithOneOutput
    {
        public dynASMBSpline()
        {
            //InPortData.Add(new PortData("pts", "A List of points defining the curve.", typeof(object)));
            OutPortData.Add(new PortData("bs", "The curve generated by this operation.", typeof(object)));

            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {
            List<Point> pts = new List<Point>();

            pts.Add(new Point(2, 2, 0));
            pts.Add(new Point(6, 4, 0));
            pts.Add(new Point(10, 2, 0));
            pts.Add(new Point(14, -2, 0));
            pts.Add(new Point(18, 2, 0));

            BSplineCurve s1 = new BSplineCurve(pts.ToArray());
            s1.persist();

            return Value.NewContainer(s1);
        }
    }

    [NodeName("ASM CoordinateSystem By Point")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("Coordinate System by point")]
    public class dynASMCoordinateSystemByPoint : dynNodeWithOneOutput
    {
        CoordinateSystem cs;

        public dynASMCoordinateSystemByPoint()
        {
            InPortData.Add(new PortData("p", "Center point of Coordinate System.", typeof(object)));
            OutPortData.Add(new PortData("cs", "The CoordinateSystem.", typeof(object)));
            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {
            Point p = (Point)((Value.Container)args[0]).Item;

            if (cs != null)
            {
                cs.unpersist();
                cs.Dispose();
                cs = null;
            }

            cs = new CoordinateSystem(p, new Vector(1, 0, 0), new Vector(0, 1, 0));
            cs.persist();

            return Value.NewContainer(cs);
        }
    }

    [NodeName("ASM Point")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("point")]
    public class dynASMPoint : dynNodeWithOneOutput
    {
        Point p;

        public dynASMPoint()
        {
            InPortData.Add(new PortData("x", "The x component.", typeof(object)));
            InPortData.Add(new PortData("y", "The y component.", typeof(object)));
            InPortData.Add(new PortData("z", "The z component.", typeof(object)));
            OutPortData.Add(new PortData("p", "The point.", typeof(object)));
            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {
            double x = (double)((Value.Number)args[0]).Item;
            double y = (double)((Value.Number)args[1]).Item;
            double z = (double)((Value.Number)args[2]).Item;

            if (p != null)
            {
                p.unpersist();
                p.Dispose();
                p = null;
            }


            p = new Point(x, y, z);
            p.persist();

            return Value.NewContainer(p);
        }
    }

    [NodeName("ASM Vector")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("vector")]
    public class dynASMVector : dynNodeWithOneOutput
    {
        public dynASMVector()
        {
            InPortData.Add(new PortData("x", "The x component.", typeof(object)));
            InPortData.Add(new PortData("y", "The y component.", typeof(object)));
            InPortData.Add(new PortData("z", "The z component.", typeof(object)));
            OutPortData.Add(new PortData("v", "The vector.", typeof(object)));
            NodeUI.RegisterAllPorts();
        }
        
        public override Value Evaluate(FSharpList<Value> args)
        {
            double x = (double)((Value.Number)args[0]).Item;
            double y = (double)((Value.Number)args[1]).Item;
            double z = (double)((Value.Number)args[2]).Item;

            Vector v = new Vector(x, y, z);

            //Fin
            return Value.NewContainer(v);
        }
    }

    [NodeName("ASM Surface By Loft")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("loft")]
    public class dynASMSurfaceByLoft : dynNodeWithOneOutput
    {
        Surface srf;

        public dynASMSurfaceByLoft()
        {
            InPortData.Add(new PortData("start", "The start of the loft.", typeof(object)));
            InPortData.Add(new PortData("end", "The end of the loft.", typeof(object)));
            OutPortData.Add(new PortData("srf", "The surface of lofting.", typeof(object)));
            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {
            if (srf != null)
            {
                srf.unpersist();
                srf.Dispose();
                srf = null;
            }

            Curve crv1 = (Curve)((Value.Container)args[0]).Item;
            Curve crv2 = (Curve)((Value.Container)args[1]).Item;

            Curve[] cross_sections = new Curve[]{ crv1, crv2 };

            srf = Surface.LoftFromCrossSections(cross_sections);
            srf.persist();

            return Value.NewContainer(srf);
        }
    }

    [NodeName("ASM Surface By Extrusion")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("extrusion")]
    public class dynASMSurfaceByExtrusion : dynNodeWithOneOutput
    {
        Surface srf;

        public dynASMSurfaceByExtrusion()
        {
            InPortData.Add(new PortData("crv", "The curve to extrude.", typeof(object)));
            InPortData.Add(new PortData("d", "The distance to extrude.", typeof(object)));
            InPortData.Add(new PortData("v", "The vector along which to extrude.", typeof(object)));
            OutPortData.Add(new PortData("srf", "The surface of extrusion.", typeof(object)));
            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {
            if (srf != null)
            {
                srf.unpersist();
                srf.Dispose();
                srf = null;
            }

            BSplineCurve crv = (BSplineCurve)((Value.Container)args[0]).Item;
            double d = (double)((Value.Number)args[1]).Item;
            Vector v = (Vector)((Value.Container)args[2]).Item;

            srf = crv.Extrude(v, d) as Surface;
            srf.persist();

            //Fin
            return Value.NewContainer(srf);
        }
    }

    [NodeName("ASM Point By Parameter")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("point")]
    public class dynPointByParamter : dynNodeWithOneOutput
    {
        Point p;

        public dynPointByParamter()
        {
            InPortData.Add(new PortData("srf", "The surface to evaluate.", typeof(object)));
            InPortData.Add(new PortData("u", "The u parameter of the point.", typeof(object)));
            InPortData.Add(new PortData("v", "The v parameter of the point.", typeof(object)));
            OutPortData.Add(new PortData("pt", "The point.", typeof(object)));
            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {
            if (p != null)
            {
                p.unpersist();
                p.Dispose();
                p = null;
            }

            Surface s = (Surface)((Value.Container)args[0]).Item;
            double u = (double)((Value.Number)args[1]).Item;
            double v = (double)((Value.Number)args[2]).Item;

            p = s.PointAtParameter(u, v) as Point;
            p.persist();

            //Fin
            return Value.NewContainer(p);
        }
    }

    [NodeName("ASM Thicken")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("thicken")]
    public class dynASMThicken : dynNodeWithOneOutput
    {
        Solid solid;

        public dynASMThicken()
        {
            InPortData.Add(new PortData("srf", "The surface to evaluate.", typeof(object)));
            InPortData.Add(new PortData("d", "The thickness.", typeof(object)));
            InPortData.Add(new PortData("b", "Both sides?.", typeof(object)));
            OutPortData.Add(new PortData("solid", "The solid.", typeof(object)));
            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {
            if (solid != null)
            {
                solid.unpersist();
                solid.Dispose();
                solid = null;
            }

            Surface s = (Surface)((Value.Container)args[0]).Item;
            double thickness = (double)((Value.Number)args[1]).Item;
            int bothSides = (int)((Value.Number)args[2]).Item;

            solid = s.Thicken(thickness, Convert.ToBoolean(bothSides)) as Solid;
            solid.persist();

            //Fin
            return Value.NewContainer(solid);
        }
    }

    [NodeName("ASM Cuboid")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("cuboid")]
    public class dynASMCuboid : dynNodeWithOneOutput
    {
        Solid solid;

        public dynASMCuboid()
        {
            InPortData.Add(new PortData("cs", "CoordinateSystem.", typeof(object)));
            InPortData.Add(new PortData("w", "The width.", typeof(object)));
            InPortData.Add(new PortData("l", "The length.", typeof(object)));
            InPortData.Add(new PortData("h", "The height.", typeof(object)));
            OutPortData.Add(new PortData("cuboid", "The cuboid.", typeof(object)));
            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {
            if (solid != null)
            {
                solid.unpersist();
                solid.Dispose();
                solid = null;
            }

            CoordinateSystem cs = (CoordinateSystem)((Value.Container)args[0]).Item;
            double width = (double)((Value.Number)args[1]).Item;
            double length = (double)((Value.Number)args[2]).Item;
            double height = (double)((Value.Number)args[3]).Item;

            solid = new Cuboid(cs, width, length, height);
            solid.persist();

            return Value.NewContainer(solid);
        }
    }

    [NodeName("Sustain Export")]
    [NodeCategory(BuiltinNodeCategories.MISC)]
    [NodeDescription("sustain")]
    public class dynSustainExport : dynNodeWithOneOutput
    {
        public dynSustainExport()
        {
            InPortData.Add(new PortData("geometry", "Input geometry.", typeof(object)));
            InPortData.Add(new PortData("filename", "Output file name.", typeof(object)));
            OutPortData.Add(new PortData("flag", "The success flag.", typeof(object)));
            NodeUI.RegisterAllPorts();
        }

        public override Value Evaluate(FSharpList<Value> args)
        {
            string file_name = (string)((Value.String)args[1]).Item;

            List<Autodesk.ASM.Geometry> sustain_geometry = new List<Autodesk.ASM.Geometry>();

            var geos = ((Value.List)args[0]).Item;

            FSharpList<Value> containers = Utils.SequenceToFSharpList(geos);

            foreach (Value e in containers)
            {
                if (e.IsContainer)
                {
                    Autodesk.ASM.Geometry g = (Autodesk.ASM.Geometry)((Value.Container)(e)).Item;
                    sustain_geometry.Add(g);
                }
            }

            Autodesk.Sustain.SustainExporter.ExportGeometry(file_name, 
                sustain_geometry.ToArray());

            return Value.NewContainer("success");
        }
    }



}
